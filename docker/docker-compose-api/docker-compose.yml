version: '3.8'

services:
  api-auth-service:
    image: ${DOCKER_REGISTRY-}api-auth-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: applications/Microservice.Api.AuthService/Dockerfile
    depends_on:
      migrator-identity-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
  
  api-gateway-service:
    image: ${DOCKER_REGISTRY-}api-gateway-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: applications/Microservice.Api.GatewayService/Dockerfile
    depends_on:
      api-auth-service:
        condition: service_started
      api-identity-service:
        condition: service_started
      api-movie-service:
        condition: service_started
      api-payment-service:
        condition: service_started
      api-review-service:
        condition: service_started
      api-test-service:
        condition: service_started

  api-identity-service:
    image: ${DOCKER_REGISTRY-}api-identity-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/identity/Microservice.Api.IdentityService/Dockerfile
    depends_on:
      migrator-identity-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  migrator-identity-service:
    image:  ${DOCKER_REGISTRY-}migrator-identity-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/identity/Microservice.Migrator.IdentityService/Dockerfile
    depends_on:
      sqlserver:
        condition: service_started

  api-movie-service:
    image: ${DOCKER_REGISTRY-}api-movie-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/movie/Microservice.Api.MovieService/Dockerfile
    depends_on:
      migrator-movie-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  migrator-movie-service:
    image:  ${DOCKER_REGISTRY-}migrator-movie-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/movie/Microservice.Migrator.MovieService/Dockerfile
    depends_on:
      sqlserver:
        condition: service_started

  api-payment-service:
    image: ${DOCKER_REGISTRY-}api-payment-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/payment/Microservice.Api.PaymentService/Dockerfile
    depends_on:
      migrator-payment-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  migrator-payment-service:
    image:  ${DOCKER_REGISTRY-}migrator-payment-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/payment/Microservice.Migrator.PaymentService/Dockerfile
    depends_on:
      sqlserver:
        condition: service_started

  api-review-service:
    image: ${DOCKER_REGISTRY-}api-review-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/review/Microservice.Api.ReviewService/Dockerfile
    depends_on:
      migrator-review-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  migrator-review-service:
    image:  ${DOCKER_REGISTRY-}migrator-review-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/review/Microservice.Migrator.ReviewService/Dockerfile
    depends_on:
      sqlserver:
        condition: service_started

  api-test-service:
    image: ${DOCKER_REGISTRY-}api-test-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/test/Microservice.Api.TestService/Dockerfile
    depends_on:
      migrator-test-service:
        condition: service_completed_successfully
      sqlserver:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  migrator-test-service:
    image:  ${DOCKER_REGISTRY-}migrator-test-service:${TAG:-latest}
    build:
      context: ../..
      dockerfile: microservices/test/Microservice.Migrator.TestService/Dockerfile
    depends_on:
      sqlserver:
        condition: service_started